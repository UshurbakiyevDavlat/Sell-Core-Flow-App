<?php

namespace AppModules\Strategies\Types;

use AppModules\Orders\Concerns\OrderSideEnum;
use AppModules\Orders\Concerns\OrderStatusEnum;
use AppModules\Orders\Concerns\OrderTypeEnum;
use AppModules\Orders\DTO\OrderDTO;
use AppModules\Strategies\Contracts\StrategyInterface;

/**
 * –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–π —Å–∏–ª—ã (RSI) –∏–∑–º–µ—Ä—è–µ—Ç, –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω –ª–∏ –∞–∫—Ç–∏–≤ (—Å–ª–∏—à–∫–æ–º –¥–æ—Ä–æ–≥–æ–π) –∏–ª–∏ –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω (—Å–ª–∏—à–∫–æ–º –¥–µ—à—ë–≤—ã–π).
 */
class RsiStrategy implements StrategyInterface
{
    private const int RSI_PERIOD = 14; // –ü–µ—Ä–∏–æ–¥ –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ RSI
    private const int RSI_OVERSOLD = 30; // –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏ (–ø–æ–∫—É–ø–∞–µ–º)
    private const int RSI_OVERBOUGHT = 70; // –£—Ä–æ–≤–µ–Ω—å –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏ (–ø—Ä–æ–¥–∞—ë–º)
    private const float PRICE_TOLERANCE = 0.98; // –î–æ–ø—É—Å–∫ –Ω–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã (2%)

    public function execute(array $marketData): ?OrderDTO
    {
        if (count($marketData) < self::RSI_PERIOD + 1) {
            return null; // –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞
        }

        [$rsi, $lastPrice, $prevPrice, $prevPrevPrice] = $this->calculateRsi($marketData);

        print("üìä RSI: $rsi | LastPrice: $lastPrice | PrevPrice: $prevPrice | PrevPrevPrice: $prevPrevPrice\n");

        // 1Ô∏è‚É£ **BUY (–ü–æ–∫—É–ø–∫–∞) –ø—Ä–∏ RSI < 30**
        if ($rsi < self::RSI_OVERSOLD && ($lastPrice >= ($prevPrice * self::PRICE_TOLERANCE) || $lastPrice > $prevPrevPrice)) {
            print("‚úÖ RSI Buy Signal Triggered! Placing Buy Order.\n");

            return new OrderDTO(
                id: 100,
                userId: 1, // TODO: –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                assetId: 1,
                type: OrderTypeEnum::Limit,
                side: OrderSideEnum::Buy,
                price: $lastPrice,
                quantity: 1,
                status: OrderStatusEnum::Pending,
                createdAt: now()->toDateTimeString()
            );
        }

        // 2Ô∏è‚É£ **SELL (–ü—Ä–æ–¥–∞–∂–∞) –ø—Ä–∏ RSI > 70**
        if ($rsi > self::RSI_OVERBOUGHT && ($lastPrice <= ($prevPrice * (2 - self::PRICE_TOLERANCE)) || $lastPrice < $prevPrevPrice)) {
            print("üìâ RSI Sell Signal Triggered! Placing Sell Order.\n");

            return new OrderDTO(
                id: 101,
                userId: 1, // TODO: –ü–æ–¥—Å—Ç–∞–≤–∏—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
                assetId: 1,
                type: OrderTypeEnum::Limit,
                side: OrderSideEnum::Sell,
                price: $lastPrice,
                quantity: 1,
                status: OrderStatusEnum::Pending,
                createdAt: now()->toDateTimeString()
            );
        }

        return null;
    }

    private function calculateRsi(array $marketData): array
    {
        $period = self::RSI_PERIOD;
        $gains = 0;
        $losses = 0;

        for ($i = 1; $i <= $period; $i++) {
            $change = $marketData[$i] - $marketData[$i - 1];
            if ($change > 0) {
                $gains += $change;
            } else {
                $losses += abs($change);
            }
        }

        // –°—Ä–µ–¥–Ω–∏–π –ø—Ä–∏—Ä–æ—Å—Ç –∏ —É–±—ã—Ç–æ–∫ (–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π)
        $avgGain = ($gains > 0) ? $gains / $period : 0.0001;
        $avgLoss = ($losses > 0) ? $losses / $period : 0.0001;

        // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º RSI
        $rs = $avgGain / $avgLoss;
        $rsi = 100 - (100 / (1 + $rs));

        // –ë–µ—Ä—ë–º —Ç–µ–∫—É—â—É—é –∏ –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Ü–µ–Ω—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
        $lastPrice = end($marketData);
        $prevPrice = $marketData[count($marketData) - 2];
        $prevPrevPrice = $marketData[count($marketData) - 3];

        return [$rsi, $lastPrice, $prevPrice, $prevPrevPrice];
    }
}
